---
title: "Functions"
author: "djani"
date: today
format:
  html:
    theme: cosmo               # Use a clean Bootstrap theme
    toc: true                  # Table of contents on the side
    toc-depth: 2               # Up to level 2 headers in TOC
    number-sections: false      # Number section headings
    code-fold: false           # Show all code by default
    code-line-numbers: false   # Don't show line numbers
    highlight-style: github    # Syntax highlighting style

execute:
  echo: true                   # Show code chunks
  results: 'markup'            # Inline output next to code
  collapse: true               # Collapse output into the same block as code
  comment: "#>"                # Prefix for output lines (like in knitr)
  warning: false               # Suppress warnings in output
  message: false               # Suppress messages (e.g., from package loading)

editor: visual                 # Use Quarto visual editor by default
lang: en                       # Set the document language
fontsize: 1em     
---

```{r, echo=FALSE}
knitr::opts_chunk$set(
  comment = "#>",
  collapse = TRUE,
  # cache = TRUE,
  fig.retina = 2,
  fig.width = 6,
  fig.asp = 2 / 3,
  fig.show = "hold"
)
```

## 🧠 R is a languages

R is not just a tool—it's a **language**. Just as any language it has:

-   **Vocabulary** (functions, objects)
-   **Syntax** (rules of structure)
-   **Grammar** (how elements combine)
-   **Semantics** (meaning)

## Function = Verbs

Functions perform actions. Most functions expect an input (arguments) and `return` a result. Think of functions as transformer, they take something in and transform it into something else.

![](meatgrinder2.png){width="320"}

Here is a more formal representation:

![](function2.png){width="262"}

Does this remind you of something? The pipe synthax looks very similar. In fact, we can use the rechtsrum (`->`) assignment operator to write an expression like this `a |> f() -> b`

```{r}
# example 
a <- 1:5

a |> mean() -> b
b
# yes you can use `->` assignment too :) 
```

As I said, functions are transformers, they transform the input (`a`) into something else (`b`). Strictly speaking, transformers will keep the length of `a` and `b` the same (`length(a) == length(b)`). Reducers on the other hand will squish (reduce) the length down to (normally) 1 element. Summary functions (`sum()`, `min()`, `max()`, `sd()` ) are reducers.

```{r}
a <- 1:5

# transformer: a hoch 2
b <- a^2
b
length(a) == length(b)

# reducer
c <- max(a)
c
length(a) == length(c)
```

![](transformerreducer.png){width="339"}

## 🔤 Arguments

The general form of a function consist of a `function_name(arguments)` Commonly, the first argument (often named `x`) is the most important and is the data (`vector`) which will be transformed. and the other arguments describe "how" it will be transformed.

![](function.png){width="413"}

```{r}
a <- c(1:100, NA)
tail(a)
sd(a)
sd(a, na.rm = TRUE)
```

## 👷🏼‍♀️Under the hood

Here is how you can write your own function. You don't need to but it is good to know what is happening behind the scenes.

```{r}
# x hoch y
power <- function(x, y) {
  result <- x^y
  return(result)
}

x <- 1:4
# Call the function
power(x, 2)
power(x, 3)
```

But, functions can do anything you want and there are functions for almost anything:

```{r}
# bc why not
voice <- function(x){
  if (x == "cat") {
    say <- "miau"
  } else if (x == "dog"){
    say <- "wof wof"
  } else {
    say <- "???"
  }
  return(say)
}

nelly <- "cat"
voice(nelly)
```

```{r, echo=FALSE}
help("mean")
```

```{r, echo = FALSE, eval=FALSE}
helpfile <- utils:::.getHelpFile(help("mean"))
outfile <- tempfile(fileext = ".html")
tools:::Rd2HTML(helpfile, out =outfile)
rawHTML <- paste(readLines(outfile), collapse="\n")
knitr::asis_output(htmltools::htmlPreserve(rawHTML))

# function definition
# mean(x, trim = 0, na.rm = FALSE, ...)
# # pipe syntax
# result <- 
#   input |> 
#   function_name()

```
